name: "Deploy - IaC (Terraform)"

# run on push to main branch only
on:
  push:
    branches:
      - main
    paths:
      - "iac/terraform/**"
  workflow_dispatch:

# Using env secrets is the preferred approach for CI/CD tools
env:
  ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
  WORKDIR: "iac/terraform"
  RESOURCES_PREFIX: "piveyterraform" # hardcoded or dynamic based on repo name
  # LOCATION: "" # hardcoded or get from secrets

# Set defaults for GitHub Actions runner
defaults:
  run:
    working-directory: "iac/terraform"

jobs:
  preview:
    name: "Preview Changes"
    runs-on: ubuntu-latest
    outputs:
      TFPLAN_EXITCODE: ${{ steps.tfplan.outputs.exitcode }}
#       RESOURCES_PREFIX: ${{ steps.resources_prefix.outputs.result }}
      tfplanExitCode: ${{ steps.tfplan.outputs.exitcode }}

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      # Get RESOURCES_PREFIX based on the repo name
#       - name: Get repo name
#         uses: actions/github-script@v5
#         id: resources_prefix
#         with:
#           result-encoding: string
#           script: return context.repo.repo.toLowerCase()

      # Install the latest version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init -backend-config=resource_group_name="${{ secrets.TFSTATE_RESOURCES_GROUP_NAME }}" -backend-config=storage_account_name="${{ secrets.TFSTATE_STORAGE_ACCOUNT_NAME }}" -backend-config=container_name="${{ secrets.TFSTATE_STORAGE_CONTAINER_NAME }}" -backend-config=key="testing.tfstate" 
        
#       # Generates an execution plan for Terraform
#       # An exit code of 2 indicates there were changes detected and will throw an error on GitHub Action. "|| exit 0" overrides it. Just continue for now, we'll check next step
#       - name: Terraform Plan
#         run: terraform plan -detailed-exitcode -var="location=${{ secrets.LOCATION }}" -var="resources_prefix=${{ env.RESOURCES_PREFIX }}" -out tfplan -input=false || exit 0

      # Generates an execution plan for Terraform
      # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
      - name: Terraform Plan
        id: tfplan
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -out tfplan -var="location=${{ secrets.LOCATION }}" -var="resources_prefix=${{ env.RESOURCES_PREFIX }}" || export exitcode=$?
          echo "::set-output name=exitcode::$exitcode"
          echo $exitcode
          
      # Save plan to artifacts  
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v2
        with:
          name: tfplan
          path: iac/terraform/tfplan

      # Create string output of Terraform Plan
      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          echo "## Terraform Plan Output" >> tf.string
          echo "<details><summary>Click to expand</summary>" >> tf.string
          echo "" >> tf.string
          echo '```terraform' >> tf.string
          echo "$TERRAFORM_PLAN" >> tf.string
          echo '```' >> tf.string
          echo "</details>" >> tf.string

          SUMMARY=$(cat tf.string)
          SUMMARY="${SUMMARY//'%'/'%25'}"
          SUMMARY="${SUMMARY//$'\n'/'%0A'}"
          SUMMARY="${SUMMARY//$'\r'/'%0D'}"

          echo "::set-output name=summary::$SUMMARY"

      # Publish Terraform Plan to task summary
      - name: Publish Terraform Plan to Task Summary
        run: |
          cat tf.string >> $GITHUB_STEP_SUMMARY

  deploy:
   name: "Deploy"
   needs: preview
   runs-on: ubuntu-latest
   environment: IaC Production
   if: needs.preview.outputs.tfplanExitCode == 2
   steps:
     # Checkout the repository to the GitHub Actions runner
     - name: Checkout
       uses: actions/checkout@v2

     # Login to Azure with Service Principal
     # This step is not required by Terraform itself, but Terraform code contains resources with "az" commands to execute on agent locally.
     - name: Azure Login
       uses: Azure/login@v1
       with:
         creds: ${{ secrets.AZURE_CREDENTIALS }}

     # Install the latest version of Terraform CLI
     - name: Setup Terraform
       uses: hashicorp/setup-terraform@v1

     # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
     - name: Terraform Init
       run: terraform init -backend-config=resource_group_name="${{ secrets.TFSTATE_RESOURCES_GROUP_NAME }}" -backend-config=storage_account_name="${{ secrets.TFSTATE_STORAGE_ACCOUNT_NAME }}" -backend-config=container_name="${{ secrets.TFSTATE_STORAGE_CONTAINER_NAME }}" -backend-config=key="testing.tfstate"

     # Download saved plan from artifacts  
     - name: Download Terraform Plan
       uses: actions/download-artifact@v2
       with:
         name: tfplan
         path: iac/terraform

     # Terraform Apply
     - name: Terraform Apply
       run: terraform apply -auto-approve tfplan
